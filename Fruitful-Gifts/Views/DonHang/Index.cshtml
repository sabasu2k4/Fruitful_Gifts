@using Fruitful_Gifts.ViewModels
@model List<DonHangViewModel>

@{
    ViewData["Title"] = "Đơn hàng";
    var trangThaiLabels = new Dictionary<int, string>
    {
        {1, "⏳ Chờ xác nhận"},
        {2, "✅ Đã xác nhận"},
        {3, "🚚 Đang giao hàng"},
        {4, "✔️ Đã giao hàng"},
        {5, "🔄 Hoàn hàng"},
        {6, "❌ Đã hủy"},
        {7, "⚠️ Giao hàng thất bại"},
        {8, "🚫 Từ chối"}
    };

    var currentTrangThai = ViewBag.CurrentTrangThai as int?;
    var counts = ViewBag.CountsByStatus as Dictionary<int, int> ?? new Dictionary<int, int>();
    var paymentStatus = ViewBag.PaymentStatus as Dictionary<int, string> ?? new Dictionary<int, string>();

    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
}

@section CSS {
    <link rel="stylesheet" href="~/css/profile.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-light: #eef2ff;
            --secondary-color: #3f37c9;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --light-color: #f8f9fa;
            --dark-color: #1e293b;
            --gray-color: #64748b;
            --border-color: #e2e8f0;
        }

        .order-management {
            background-color: #f8fafc;
            min-height: 100vh;
        }

        .order-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }

        .order-header-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .order-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--dark-color);
            margin: 0;
        }

        .order-subtitle {
            color: var(--gray-color);
            font-size: 0.95rem;
            margin-top: 0.5rem;
        }

        .continue-shopping-btn {
            background-color: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        .continue-shopping-btn:hover {
            background-color: var(--secondary-color);
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(67, 97, 238, 0.1);
            color: white;
        }

        .order-tabs {
            display: flex;
            border-bottom: 1px solid var(--border-color);
            margin-bottom: 2rem;
            overflow-x: auto;
            padding-bottom: 1px;
        }

        .order-tab {
            padding: 0.75rem 1.25rem;
            font-weight: 500;
            color: var(--gray-color);
            white-space: nowrap;
            border-bottom: 2px solid transparent;
            transition: all 0.2s ease;
            margin-right: 0.5rem;
            border-radius: 0.25rem 0.25rem 0 0;
        }

        .order-tab:hover {
            color: var(--primary-color);
            background-color: var(--primary-light);
        }

        .order-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            background-color: var(--primary-light);
        }

        .order-tab-count {
            background-color: var(--border-color);
            color: var(--dark-color);
            padding: 0.15rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }

        .order-tab.active .order-tab-count {
            background-color: var(--primary-color);
            color: white;
        }

        .order-card {
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: all 0.2s ease;
            border: 1px solid var(--border-color);
        }

        .order-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.05);
        }

        .order-card-header {
            padding: 1.25rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--border-color);
            background-color: #f8fafc;
        }

        .order-info {
            display: flex;
            flex-direction: column;
        }

        .order-number {
            font-weight: 600;
            color: var(--dark-color);
            font-size: 1.1rem;
            margin-bottom: 0.25rem;
        }

        .order-date {
            color: var(--gray-color);
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .order-status {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 0.5rem;
        }

        .status-badge {
            padding: 0.35rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.8rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .status-pending {
            background-color: #fffbeb;
            color: var(--warning-color);
        }

        .status-confirmed {
            background-color: #ecfdf5;
            color: var(--success-color);
        }

        .status-shipping {
            background-color: #eff6ff;
            color: var(--primary-color);
        }

        .status-delivered {
            background-color: #ecfdf5;
            color: var(--success-color);
        }

        .status-cancelled {
            background-color: #fef2f2;
            color: var(--danger-color);
        }

        .payment-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .payment-success {
            background-color: #ecfdf5;
            color: var(--success-color);
        }

        .payment-pending {
            background-color: #fffbeb;
            color: var(--warning-color);
        }

        .payment-failed {
            background-color: #fef2f2;
            color: var(--danger-color);
        }

        .order-card-body {
            padding: 1.5rem;
        }

        .product-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .product-table thead th {
            text-align: left;
            padding: 0.75rem 1rem;
            font-size: 0.85rem;
            font-weight: 500;
            color: var(--gray-color);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            background-color: #f8fafc;
            border-bottom: 1px solid var(--border-color);
        }

        .product-table th:first-child {
            border-top-left-radius: 0.5rem;
        }

        .product-table th:last-child {
            border-top-right-radius: 0.5rem;
        }

        .product-table tbody tr {
            transition: all 0.2s ease;
        }

        .product-table tbody tr:hover {
            background-color: #f8fafc;
        }

        .product-table td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--border-color);
        }

        .product-item {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .product-image {
            width: 60px;
            height: 60px;
            border-radius: 0.5rem;
            object-fit: cover;
            border: 1px solid var(--border-color);
        }

        .product-name {
            font-weight: 500;
            color: var(--dark-color);
            margin-bottom: 0.25rem;
        }

        .product-category {
            font-size: 0.75rem;
            color: var(--gray-color);
            background-color: var(--border-color);
            padding: 0.15rem 0.5rem;
            border-radius: 9999px;
            display: inline-block;
        }

        .product-price {
            font-weight: 600;
            color: var(--dark-color);
        }

        .product-quantity {
            color: var(--gray-color);
        }

        .product-total {
            font-weight: 600;
            color: var(--primary-color);
        }

        .order-summary {
            margin-top: 1.5rem;
            background-color: #f8fafc;
            border-radius: 0.5rem;
            padding: 1.25rem;
            border: 1px solid var(--border-color);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
        }

        .summary-label {
            color: var(--gray-color);
        }

        .summary-value {
            font-weight: 500;
            color: var(--dark-color);
        }

        .summary-total {
            padding-top: 0.75rem;
            border-top: 1px solid var(--border-color);
            margin-top: 0.75rem;
            font-weight: 600;
        }

        .total-amount {
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .order-card-footer {
            padding: 1.25rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-top: 1px solid var(--border-color);
            background-color: #f8fafc;
        }

        .order-note {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: var(--gray-color);
            font-size: 0.9rem;
        }

        .order-actions {
            display: flex;
            gap: 0.75rem;
        }

        .action-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            font-weight: 500;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
        }

        .btn-outline {
            border: 1px solid var(--border-color);
            color: var(--dark-color);
            background-color: white;
        }

        .btn-outline:hover {
            background-color: #f8fafc;
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #dc2626;
            color: white;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #059669;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            background-color: white;
            border-radius: 0.75rem;
            border: 1px dashed var(--border-color);
            margin: 2rem 0;
        }

        .empty-icon {
            font-size: 3rem;
            color: #e2e8f0;
            margin-bottom: 1rem;
        }

        .empty-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 0.5rem;
        }

        .empty-description {
            color: var(--gray-color);
            margin-bottom: 1.5rem;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
            gap: 0.5rem;
        }

        .page-item {
            display: flex;
        }

        .page-link {
            padding: 0.5rem 0.75rem;
            border-radius: 0.5rem;
            color: var(--gray-color);
            font-weight: 500;
            transition: all 0.2s ease;
            border: 1px solid transparent;
        }

        .page-link:hover {
            background-color: var(--primary-light);
            color: var(--primary-color);
        }

        .page-item.active .page-link {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .page-item.disabled .page-link {
            color: #cbd5e1;
            pointer-events: none;
        }

        /* Animation */
        .animate-fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .order-card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .order-status {
                align-items: flex-start;
            }

            .product-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }

            .product-image {
                width: 50px;
                height: 50px;
            }

            .order-card-footer {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }

            .order-actions {
                width: 100%;
                flex-direction: column;
            }

            .action-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
}

<div class="order-management">
    <div class="order-container">
        <div class="row">
            <div class="col-md-3">
                @Html.Partial("~/Views/Shared/PartialsViews/_SlidebarProfile.cshtml")
            </div>

            <div class="col-md-9">
                <div class="order-header-section">
                    <div>
                        <h1 class="order-title">@ViewData["Title"]</h1>
                        <p class="order-subtitle">Quản lý và theo dõi đơn hàng của bạn</p>
                    </div>
                    <a href="@Url.Action("Index", "TrangChu")" class="continue-shopping-btn">
                        <i class="bi bi-cart-plus"></i>Tiếp tục mua sắm
                    </a>
                </div>

                <div class="order-tabs">
                    <a href="@Url.Action("Index", "DonHang")" 
                       class="order-tab @(currentTrangThai == null ? "active" : "")">
                        Tất cả <span class="order-tab-count">@counts.Values.Sum()</span>
                    </a>
                    @foreach (var item in trangThaiLabels)
                    {
                        counts.TryGetValue(item.Key, out int count);
                        <a href="@Url.Action("Index", "DonHang", new { trangThai = item.Key })" 
                           class="order-tab @(currentTrangThai == item.Key ? "active" : "")">
                            @item.Value <span class="order-tab-count">@count</span>
                        </a>
                    }
                </div>

                @{
                    var statusText = currentTrangThai.HasValue && trangThaiLabels.ContainsKey(currentTrangThai.Value)
                    ? $"\"{trangThaiLabels[currentTrangThai.Value]}\""
                    : "";
                }

                @if (!Model.Any())
                {
                    <div class="empty-state animate-fade-in">
                        <div class="empty-icon">
                            <i class="bi bi-box-seam"></i>
                        </div>
                        <h3 class="empty-title">Không có đơn hàng nào @statusText</h3>
                        <p class="empty-description">Bạn chưa có đơn hàng nào trong mục này. Hãy tiếp tục mua sắm!</p>
                        <a href="@Url.Action("Index", "TrangChu")" class="continue-shopping-btn">
                            <i class="bi bi-cart-plus"></i>Mua sắm ngay
                        </a>
                    </div>
                }

                @foreach (var don in Model)
                {
                    <div class="order-card animate-fade-in">
                        <div class="order-card-header">
                            <div class="order-info">
                                <div class="order-number">Đơn hàng #@don.MaDh</div>
                                <div class="order-date">
                                    <i class="bi bi-calendar"></i>
                                    @don.NgayDatHang?.ToString("dd/MM/yyyy HH:mm")
                                </div>
                            </div>
                            <div class="order-status">
                                @{
                                    string statusLabel = trangThaiLabels.ContainsKey(don.TrangThai ?? 0)
                                    ? trangThaiLabels[don.TrangThai ?? 0]
                                    : "Không xác định";

                                    string paymentLabel = paymentStatus.ContainsKey(don.TrangThaiThanhToan ?? 0)
                                    ? paymentStatus[don.TrangThaiThanhToan ?? 0]
                                    : "Không xác định";

                                    string statusClass = don.TrangThai switch
                                    {
                                        1 => "status-pending",
                                        2 => "status-confirmed",
                                        3 => "status-shipping",
                                        4 => "status-delivered",
                                        _ => "status-cancelled"
                                    };

                                    string paymentClass = don.TrangThaiThanhToan switch
                                    {
                                        1 => "payment-badge payment-success",
                                        2 => "payment-badge payment-failed",
                                        _ => "payment-badge payment-pending"
                                    };
                                }
                                <div class="status-badge @statusClass">
                                    @statusLabel
                                </div>
                                <div class="@paymentClass">
                                    <i class="bi bi-credit-card"></i>@paymentLabel
                                </div>
                            </div>
                        </div>

                        <div class="order-card-body">
                            <table class="product-table">
                                <thead>
                                    <tr>
                                        <th>Sản phẩm</th>
                                        <th>Đơn giá</th>
                                        <th>Số lượng</th>
                                        <th>Thành tiền</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var sp in don.SanPhams)
                                    {
                                        <tr>
                                            <td>
                                                <div class="product-item">
                                                    <img src="~/images/@(sp.Loai == "gq" ? "gioqua" : "sanpham")/@sp.HinhAnh"
                                                         alt="@sp.TenSp"
                                                         class="product-image" />
                                                    <div>
                                                        <div class="product-name">@sp.TenSp</div>
                                                        <span class="product-category">@(sp.Loai == "gq" ? "Giỏ quà" : "Sản phẩm")</span>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="product-price">
                                                @(sp.DonGia.HasValue ? sp.DonGia.Value.ToString("N0") + " đ" : "N/A")
                                            </td>
                                            <td class="product-quantity">@sp.SoLuong</td>
                                            <td class="product-total">
                                                @sp.TongTien?.ToString("N0") đ
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>

                            <div class="order-summary">
                                <div class="summary-row">
                                    <span class="summary-label">Tạm tính:</span>
                                    <span class="summary-value">@((don.TongTienDonHang - don.PhiVanChuyen)?.ToString("N0")) đ</span>
                                </div>
                                <div class="summary-row">
                                    <span class="summary-label">Phí vận chuyển:</span>
                                    <span class="summary-value">@don.PhiVanChuyen?.ToString("N0") đ</span>
                                </div>
                                <div class="summary-row summary-total">
                                    <span class="summary-label">Tổng cộng:</span>
                                    <span class="summary-value total-amount">@don.TongTienDonHang?.ToString("N0") đ</span>
                                </div>
                            </div>
                        </div>

                        <div class="order-card-footer">
                            <div class="order-note">
                                @if (!string.IsNullOrEmpty(don.GhiChu))
                                {
                                    <i class="bi bi-chat-square-text"></i>
                                    <span>@don.GhiChu</span>
                                }
                            </div>
                            <div class="order-actions">
                                <a class="action-btn btn-outline"
                                   asp-controller="DonHang"
                                   asp-action="DetailsDonHang"
                                   asp-route-id="@don.MaDh">
                                    <i class="bi bi-eye"></i>Chi tiết
                                </a>
                                @if (don.TrangThai == 1)
                                {
                                    <button class="action-btn btn-danger cancel-order-btn" data-id="@don.MaDh">
                                        <i class="bi bi-x-circle"></i> Hủy đơn
                                    </button>
                                }

                                @if (don.TrangThai == 4)
                                {
                                    <button class="action-btn btn-success">
                                        <i class="bi bi-check-circle"></i>Đã nhận
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }

                @if (totalPages > 1)
                {
                    <div class="pagination">
                        <div class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Index", "DonHang", new { trangThai = currentTrangThai, page = currentPage - 1 })">
                                <i class="bi bi-chevron-left"></i>
                            </a>
                        </div>

                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <div class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link"
                                   href="@Url.Action("Index", "DonHang", new { trangThai = currentTrangThai, page = i })">@i</a>
                            </div>
                        }

                        <div class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link"
                               href="@Url.Action("Index", "DonHang", new { trangThai = currentTrangThai, page = currentPage + 1 })">
                                <i class="bi bi-chevron-right"></i>
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Animation for order cards
        document.addEventListener('DOMContentLoaded', function() {
            const orderCards = document.querySelectorAll('.order-card');
            orderCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = 1;
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
            
            // Add hover effects for buttons
            const buttons = document.querySelectorAll('.action-btn');
            buttons.forEach(button => {
                button.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
                });
                button.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = 'none';
                });
            });
        });
        //hủy đơn
        document.addEventListener('DOMContentLoaded', function () {
            const cancelButtons = document.querySelectorAll('.cancel-order-btn');

            cancelButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const orderId = this.getAttribute('data-id');

                    Swal.fire({
                        title: 'Bạn có chắc muốn hủy đơn hàng?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Hủy đơn',
                        cancelButtonText: 'Không'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const formData = new URLSearchParams();
                            formData.append("id", orderId);

                            fetch('/DonHang/CancelOrder', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'X-Requested-With': 'XMLHttpRequest'
                                },
                                body: formData
                            })
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Thành công!',
                                            text: data.message,
                                            timer: 2000,
                                            showConfirmButton: false
                                        }).then(() => {
                                            location.reload();
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Thất bại!',
                                            text: data.message
                                        });
                                    }
                                })
                                .catch(error => {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi kết nối!',
                                        text: 'Đã xảy ra lỗi khi gửi yêu cầu.'
                                    });
                                    console.error(error);
                                });
                        }
                    });
                });
            });
        });


    </script>
}